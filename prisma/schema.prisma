generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  deviceId      String  @unique
  expoPushToken String? @unique @map("expo_push_token")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at")

  plants       Plant[]
  userSettings UserSettings?
  attachments  Attachment[]
  Reminder     Reminder[]
  bugReports   BugReport[]

  @@map("users")
}

model Plant {
  id          String  @id @default(uuid())
  name        String
  description String?
  shareId     String  @unique @map("share_id")

  imageSrc String? @map("image_src")
  color    String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at")

  users       User[]
  waterings   Watering[]
  attachments Attachment[]
  reminders   Reminder[]

  @@map("plants")
}

model Watering {
  id        String   @id @default(uuid())
  plantId   String   @map("plant_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  plant Plant @relation(fields: [plantId], references: [id])

  @@map("waterings")
}

model Attachment {
  id             String         @id @default(uuid())
  plantId        String         @map("plant_id")
  userId         String         @map("user_id")
  url            String
  attachmentType AttachmentType @map("attachment_type")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at")

  plant Plant @relation(fields: [plantId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("attachments")
}

model Reminder {
  id      String @id @default(uuid())
  plantId String @map("plant_id")
  userId  String @map("user_id")

  frequencyDays Int          @map("frequency_days")
  reminderType  ReminderType @map("reminder_type")
  notified      Boolean      @default(false)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  plant Plant @relation(fields: [plantId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("reminders")
}

model UserSettings {
  id                       String  @id @default(uuid())
  userId                   String  @unique @map("user_id")
  pushNotificationsEnabled Boolean @default(true) @map("push_notifications_enabled")

  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])

  @@map("user_settings")
}

model PatchNotes {
  id       String @id @default(uuid())
  patch    String
  language String

  changes String[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("patch_notes")
}

model BugReport {
  id          String  @id @default(uuid())
  userId      String  @map("user_id")
  email       String?
  description String
  deviceInfo  Json?   @map("device_info")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])

  @@map("bug_reports")
}

enum AttachmentType {
  plant_picture
}

enum ReminderType {
  plant_watering
}
